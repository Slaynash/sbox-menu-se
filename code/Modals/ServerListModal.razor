@using Sandbox.Modals
@using Sandbox
@using Sandbox.Network

@namespace Menu.Modals
@inherits Menu.Modals.BaseModal

@attribute [StyleSheet]

<root class="modal">
	<div class="inner-modal">

		@if ( busy )
		{
			<Loader></Loader>
		}
		else if (lobbies.Count == 0)
		{
			<div class="notice">Sorry - no servers were found 😔</div>
		}
		else
		{

			@foreach ( LobbyInformation lobby in lobbies )
			{
                var l = lobby;

                <div class="row" onclick=@( () => OnLobbySelected( lobby ) )>
					<div class="title">@lobby.Name</div>

					@if (Config.GamePackageFilter != lobby.Game)
					{
						<div class="game">@lobby.Game</div>
					}
                    @if (Config.MapPackageFilter != lobby.Map)
                    {
                        <div class="map">@lobby.Map</div>
                    }

					<div class="members">
						<div class="current">@lobby.Members</div>
						<div class="sep">/</div>
						<div class="maxmembers">@lobby.MaxMembers</div>
					</div>
				</div>
			}
		}
	</div>
</root>

@code
{
    ServerListConfig Config;

    public IEnumerable<Friend> Friends => MenuUtility.Friends.Where( x => !x.IsMe )
        .OrderBy( x => x.Name )
        .OrderBy( x => x.IsAway || x.IsBusy || x.IsSnoozing );

    bool busy;
    List<LobbyInformation> lobbies = new();


    public ServerListModal( ServerListConfig config )
    {
        Config = config;
    }

    protected override async Task OnParametersSetAsync()
    {
        await RefreshLobbies();
    }

    async Task RefreshLobbies()
    {
        busy = true;
        lobbies = await Networking.QueryLobbies(Config.GamePackageFilter, Config.MapPackageFilter);
        busy = false;

        StateHasChanged();
    }

    void OnLobbySelected( LobbyInformation lobby )
    {
        GameNetworkSystem.Connect( lobby.LobbyId );
        CloseModal(true);
    }
}
