@using Sandbox;
@using Sandbox.UI;
@using Sandbox.Network;
@page "/lobbies/all"
@inherits Panel

<style>
    .package-list 
    {
        padding: 50px 0px;
    }
</style>

<root class="page-container page">
    <style>
        .checkerApiConnected{
        flex-grow:1;
        justify-content:center;
        align-items: center;
        flex-direction: column;
        gap:16px;
    }
    .lobby-container{
        display:flex;
        flex-direction:column;
        width:100%;
        align-items:center;
        max-height:100%;
        overflow:scroll;
    }
    .lobby-info-container{
        background-color:#363636;
        border-radius:10px;
        display:flex;
        flex-direction:column;
        width:50%;
        align-items:center;
        max-height:100%;
    }
    .table-header{
        margin:10px;
        margin-left:10%;
        margin-right:10%;
    }
    .lobby-bulle{
        position:relative;
        width:95%;
        min-height:80px;
        margin:5px;
        margin-top:25px;
        display:flex;
        flex-direction:row;
        border-radius:15px;
        border:0;
        transition: border 1s ease-out 400ms;
        justify-content:space-between;
    }
    .lobby-bulle:hover{border:solid 2px #2f72a8;}
    .lobby-bulle:hover .lobby-tags{border:solid;border-image:linear-gradient(to right, #2f72a8, #ffffff00) 2px;}
    .bulle-container{justify-content:space-between;min-width:100%;}
    .lobby-unpublish{
        text-align:center;
        position:absolute;
        bottom:80px;
        right:11%;
        height:30px;
        width:300px;
    } 
    .lobby-icon{width:30px;height:30px;border-radius:5px;position:absolute;bottom:20px;left:-25px;}
    .lobby-tags{width:auto;height:auto;border-radius:5px;position:absolute;bottom:45px;background-color:gray;text-align:center;padding:2px;}
    .lobby-info{/*margin:25px;margin-left:1%;margin-right:5px;*/flex-grow:1;flex-basis:1;}
    .space{margin-left:5px;}
    .info-img{
    width:300px;
    height:300px;
    border-radius:15px;
    border:4px solid #2f72a8;
    margin:5%;
    }
    .info-join{
        padding:5%;
        padding-left:30%;padding-right:30%;
        background-color:#279442;
        border: 2px solid #2fa84d;
        border-radius: 18px;
        color:white;
        font-size:1.5vh;
        margin-top: 25%;
        transition: border 0.2s ease-out 100ms;
        transition: background-color 0.2s ease-out 100ms;
    }
    .info-join:hover{background-color:#33afaf;border: 2px solid #2f72a8;}
    </style>
    @if ( !Global.IsApiConnected )
    {
        <div class="checkerApiConnected">
            <div class="glass is-heading with-padding">You're running in offline mode and can't see any games. Restart your game and try again.</div>
            <div class="glass is-heading with-padding">In the future we'll refresh this for you.</div>
        </div>
        return;
    }
    else
    {
        <div class="lobby-container">
            @foreach ( LobbyInformation lobbyInfo in lobbies )
            {
                @if ( lobbyInfo.Game.StartsWith("local.") )
                    continue;
                
                <button class='lobby-bulle' style='background-color:@( lobbyInfo.Data["dev"] == "1" ? "#303020" : "#202020");'>
                    <span><img src="https://i.pinimg.com/originals/ae/24/87/ae24874dd301843548c034a3d2973658.png" class="lobby-icon"></span>
                    <div class="bulle-container">  
                        <span class="lobby-tags" style='left:2vh;background-color:@( lobbyInfo.Data["dev"] == "1" ? "#303020" : "#202020");'>NAME</span>
                        <span class="lobby-tags" style='left:30vh;background-color:@( lobbyInfo.Data["dev"] == "1" ? "#303020" : "#202020");'>GAME</span>
                        <span class="lobby-tags" style='left:55vh;background-color:@( lobbyInfo.Data["dev"] == "1" ? "#303020" : "#202020");'>MAP</span>
                        <span class="lobby-tags" style='left:80vh;background-color:@( lobbyInfo.Data["dev"] == "1" ? "#303020" : "#202020");'>ONLINE</span>
                        <div class="lobby-info"><span class="space">@lobbyInfo.Name</span></div>
                        <div class="lobby-info"><span class="space">@lobbyInfo.Game</span></div>
                        <div class="lobby-info"><span class="space">@lobbyInfo.Map</span></div>
                        <div class="lobby-info"><span class="space">@lobbyInfo.Members / @lobbyInfo.MaxMembers</span></div>   
                    </div>
                </button>
            }

        </div>

        <div class="lobby-info-container">
            <img class="info-img" src="https://i.pinimg.com/originals/ae/24/87/ae24874dd301843548c034a3d2973658.png" alt="">
            <h4 style="font-size:25px;margin:1%;">Username</h4>
            <h3 style="font-size:30px;margin:1%;">game.thegame</h3>
            <h5 style="font-size:20px;margin:1%;">map.map</h5>
            <h4 style="font-size:25px;margin:1%;">0/64</h4>
            <button class="info-join">Join</button>
        </div>

        <div class="lobby-unpublish">
            <span style="font-size:2vh;color:gray;">Not showing @( lobbies.Select(lobby => lobby.Game.StartsWith("local.")).Count() ) local games</span>
        </div>
    }
</root>

@code{
    private float refreshDelta = 10.0f;

    List<LobbyInformation> lobbies = new List<LobbyInformation>();
    private float lastRefresh = 0;
    private bool isRefreshing = false;

    private async void LoadLobbies()
    {
        lobbies = await Networking.QueryLobbies();
        Log.Info($"Found {lobbies.Count} lobbies.");

        lastRefresh = Time.Now;
        isRefreshing = false;

        StateHasChanged();
    }

    public override void Tick() // Kinda an ugly way to do this ngl, maybe there is a better way?
    {
        base.Tick();

        if (Time.Now > lastRefresh + refreshDelta && !isRefreshing)
        {
            isRefreshing = true;
            LoadLobbies();
        }
    }

    /*
    string GameIdent => "facepunch.walker";

    async void OnPackageSelected(Package package)
    {
        LaunchArguments.Map = null;
        var lobbies = await Networking.QueryLobbies(GameIdent, package.FullIdent);
        foreach( var lobby in lobbies) // TODO - order by most attractive
        {
            if ( lobby.IsFull ) continue;

            if ( await Sandbox.Network.GameNetworkSystem.TryConnectSteamId(lobby.LobbyId) )
                return;
        }

        CreateGame( package );
    }

    void CreateGame( Package package )
    {
        LaunchArguments.Map = package.FullIdent;
        MenuUtility.OpenGame(GameIdent, false);
    }

    void ViewGameList(Package package)
    {
        Game.Overlay.ShowServerList( new Sandbox.Modals.ServerListConfig( GameIdent, package.FullIdent ) );
    }

    void OpenMenu(Package package)
    {
        var menu = MenuPanel.Open( this );

        menu.AddOption("play_arrow", "Join game", () => OnPackageSelected(package));
        menu.AddOption("playlist_add", "Create own game", () => CreateGame(package));

        menu.AddSpacer();

        menu.AddOption("list", "View servers", () => ViewGameList(package));

     //   menu.AddOption( "folder", "Launch With Map..", OnLaunchWithMap );

        menu.AddSpacer();
        menu.AddOption("info", $"View Map Details", () => Game.Overlay.ShowPackageModal(package.FullIdent));
        menu.AddOption("corporate_fare", $"View Creator", () => Game.Overlay.ShowOrganizationModal(package.Org));

        // Add Vote buttons?
    }
    */
}
